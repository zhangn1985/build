diff --git a/include/linux/init.h b/include/linux/init.h
index 212fc9e2f691..8dc083c29159 100644
--- a/include/linux/init.h
+++ b/include/linux/init.h
@@ -238,6 +238,8 @@ extern bool initcall_debug;
 
 #define console_initcall(fn)	___define_initcall(fn,, .con_initcall)
 
+extern struct async_domain populate_rootfs_domain;
+
 struct obs_kernel_param {
 	const char *str;
 	int (*setup_func)(char *);
diff --git a/init/initramfs.c b/init/initramfs.c
index 8ec1be4d7d51..07234165b1f3 100644
--- a/init/initramfs.c
+++ b/init/initramfs.c
@@ -1,4 +1,5 @@
 // SPDX-License-Identifier: GPL-2.0
+#include <linux/async.h>
 #include <linux/init.h>
 #include <linux/fs.h>
 #include <linux/slab.h>
@@ -651,7 +652,9 @@ static void __init populate_initrd_image(char *err)
 }
 #endif /* CONFIG_BLK_DEV_RAM */
 
-static int __init populate_rootfs(void)
+ASYNC_DOMAIN(populate_rootfs_domain);
+
+static void __init async_populate_rootfs(void *data, async_cookie_t cookie)
 {
 	/* Load the built in initramfs */
 	char *err = unpack_to_rootfs(__initramfs_start, __initramfs_size);
@@ -683,6 +686,11 @@ static int __init populate_rootfs(void)
 	initrd_end = 0;
 
 	flush_delayed_fput();
-	return 0;
 }
+
+static int __init populate_rootfs(void)
+{
+	async_schedule_domain(async_populate_rootfs, NULL, &populate_rootfs_domain);
+	return 0;
+ }
 rootfs_initcall(populate_rootfs);
diff --git a/init/main.c b/init/main.c
index f95b014a5479..0a32e5a09b94 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1438,6 +1438,14 @@ static noinline void __init kernel_init_freeable(void)
 
 	do_basic_setup();
 
+#ifdef CONFIG_BLK_DEV_INITRD
+	/*
+	 * We need to ensure that the filesystem is ready by this point,
+	 *  wait for async_populate_rootfs to complete.
+	 */
+	async_synchronize_full_domain(&populate_rootfs_domain);
+#endif
+
 	console_on_rootfs();
 
 	/*
