From c63e02ab2758dce34ba0695b9821b208ec5ac917 Mon Sep 17 00:00:00 2001
From: Zhang Ning <832666+zhangn1985@users.noreply.github.com>
Date: Tue, 24 Mar 2020 14:58:40 +0800
Subject: [PATCH] update linux package scripts

---
 scripts/package/builddeb | 103 +++------------------------------------
 scripts/package/mkdebian |  12 +----
 2 files changed, 9 insertions(+), 106 deletions(-)

diff --git a/scripts/package/builddeb b/scripts/package/builddeb
index 63f38f89a17c..72eb9c86effa 100755
--- a/scripts/package/builddeb
+++ b/scripts/package/builddeb
@@ -41,27 +41,6 @@ create_package() {
 	# in case we are in a restrictive umask environment like 0077
 	chmod -R a+rX "$pdir"
 
-	# Create preinstall and post install script to remove dtb
-	if [ "$3" = "dtb" ]; then
-		echo "if [ -d /boot/dtb-$version ]; then mv /boot/dtb-$version /boot/dtb-$version.old; fi" >> $pdir/DEBIAN/preinst
-		echo "if [ -d /boot/dtb.old ]; then rm -rf /boot/dtb.old; fi" >> $pdir/DEBIAN/preinst
-		echo "if [ -d /boot/dtb ]; then mv /boot/dtb /boot/dtb.old; fi" >> $pdir/DEBIAN/preinst
-		echo "exit 0" >> $pdir/DEBIAN/preinst
-		chmod 775 $pdir/DEBIAN/preinst
-
-		echo "if [ -d /boot/dtb-$version.old ]; then rm -rf /boot/dtb-$version.old; fi" >> $pdir/DEBIAN/postinst
-		echo "ln -sf dtb-$version /boot/dtb > /dev/null 2>&1 || mv /boot/dtb-$version /boot/dtb" >> $pdir/DEBIAN/postinst
-		echo "exit 0" >> $pdir/DEBIAN/postinst
-		chmod 775 $pdir/DEBIAN/postinst
-	fi
-
-	# Create postinstall script for headers
-	if [ "$3" = "headers" ]; then
-		echo "cd /usr/src/linux-headers-$version; echo \"Compiling headers - please wait ...\"; find -type f -exec touch {} +;make -s scripts >/dev/null; make -s M=scripts/mod/ >/dev/null" >> $pdir/DEBIAN/postinst
-		echo "exit 0" >> $pdir/DEBIAN/postinst
-		chmod 775 $pdir/DEBIAN/postinst
-	fi
-
 	# Create the package
 	dpkg-gencontrol -p$pname -P"$pdir"
 	dpkg --build "$pdir" ..
@@ -72,11 +51,9 @@ tmpdir="$objtree/debian/tmp"
 kernel_headers_dir="$objtree/debian/hdrtmp"
 libc_headers_dir="$objtree/debian/headertmp"
 dbg_dir="$objtree/debian/dbgtmp"
-dtb_dir="$objtree/debian/dtbtmp"
-packagename=linux-image-"$BRANCH$LOCALVERSION"
-kernel_headers_packagename=linux-headers-"$BRANCH$LOCALVERSION"
-dtb_packagename=linux-dtb-"$BRANCH$LOCALVERSION"
-libc_headers_packagename=linux-libc-dev-"$BRANCH$LOCALVERSION"
+packagename=linux-image"$LOCALVERSION"
+kernel_headers_packagename=linux-headers"$LOCALVERSION"
+libc_headers_packagename=linux-libc-dev
 dbg_packagename=$packagename-dbg
 
 if [ "$ARCH" = "um" ] ; then
@@ -87,15 +64,6 @@ fi
 # XXX: have each arch Makefile export a variable of the canonical image install
 # path instead
 case $ARCH in
-aarch64|arm64)
-	image_name=Image
-	installed_image_path="boot/vmlinuz-$version"
-
-	;;
-arm*)
-	image_name=zImage
-	installed_image_path="boot/vmlinuz-$version"
-	;;
 um)
 	installed_image_path="usr/bin/linux-$version"
 	;;
@@ -109,9 +77,7 @@ esac
 BUILD_DEBUG=$(if_enabled_echo CONFIG_DEBUG_INFO Yes)
 
 # Setup the directory structure
-rm -rf "$tmpdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir" "$dtb_dir" $objtree/debian/files
-mkdir -m 755 -p "$dtb_dir/DEBIAN"
-mkdir -p "$dtb_dir/boot/dtb-$version" "$dtb_dir/usr/share/doc/$dtb_packagename"
+rm -rf "$tmpdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir" $objtree/debian/files
 mkdir -m 755 -p "$tmpdir/DEBIAN"
 mkdir -p "$tmpdir/lib" "$tmpdir/boot"
 mkdir -p "$kernel_headers_dir/lib/modules/$version/"
@@ -163,11 +129,6 @@ if is_enabled CONFIG_MODULES; then
 	fi
 fi
 
-if grep -q '^CONFIG_OF=y' $KCONFIG_CONFIG ; then
-	#mkdir -p "$tmpdir/boot/dtb"
-	INSTALL_DTBS_PATH="$dtb_dir/boot/dtb-$version" $MAKE KBUILD_SRC= dtbs_install
-fi
-
 if [ "$ARCH" != "um" ]; then
 	$MAKE -f $srctree/Makefile headers
 	$MAKE -f $srctree/Makefile headers_install INSTALL_HDR_PATH="$libc_headers_dir/usr"
@@ -187,7 +148,7 @@ debhookdir=${KDEB_HOOKDIR:-/etc/kernel}
 for script in postinst postrm preinst prerm ; do
 	mkdir -p "$tmpdir$debhookdir/$script.d"
 	cat <<EOF > "$tmpdir/DEBIAN/$script"
-#!/bin/bash
+#!/bin/sh
 
 set -e
 
@@ -203,58 +164,9 @@ EOF
 	chmod 755 "$tmpdir/DEBIAN/$script"
 done
 
-##
-## Create sym link to kernel image
-##
-sed -e "s/exit 0//g" -i $tmpdir/DEBIAN/postinst
-cat >> $tmpdir/DEBIAN/postinst <<EOT
-if [ "\$(grep nand /proc/partitions)" != "" ] && [ "\$(grep mmc /proc/partitions)" = "" ]; then
-	mkimage -A arm -O linux -T kernel -C none -a "0x40008000" -e "0x40008000" -n "Linux kernel" -d /$installed_image_path /boot/uImage  > /dev/null 2>&1
-	cp /boot/uImage /tmp/uImage
-	sync
-	mountpoint -q /boot || mount /boot
-	cp /tmp/uImage /boot/uImage
-	rm -f /$installed_image_path
-else
-	ln -sf $(basename $installed_image_path) /boot/$image_name || mv /$installed_image_path /boot/$image_name
-fi
-touch /boot/.next
-exit 0
-EOT
-
-##
-## FAT install workaround
-##
-sed -e "s/exit 0//g" -i $tmpdir/DEBIAN/preinst
-cat >> $tmpdir/DEBIAN/preinst <<EOT
-# exit if we are running chroot
-if [ "\$(stat -c %d:%i /)" != "\$(stat -c %d:%i /proc/1/root/.)" ]; then exit 0; fi
-
-check_and_unmount (){
-	boot_device=\$(mountpoint -d /boot)
-
-	for file in /dev/* ; do
-		CURRENT_DEVICE=\$(printf "%d:%d" \$(stat --printf="0x%t 0x%T" \$file))
-		if [[ "\$CURRENT_DEVICE" = "\$boot_device" ]]; then
-			boot_partition=\$file
-			break
-		fi
-	done
-
-	bootfstype=\$(blkid -s TYPE -o value \$boot_partition)
-	if [ "\$bootfstype" = "vfat" ]; then
-		umount /boot
-		rm -f /boot/System.map* /boot/config* /boot/vmlinuz* /boot/$image_name /boot/uImage
-	fi
-}
-mountpoint -q /boot && check_and_unmount
-EOT
-echo "exit 0" >> $tmpdir/DEBIAN/preinst
-
 # Build kernel header package
 (cd $srctree; find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl) > "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/*/include include scripts -type f -o -type l) >> "$objtree/debian/hdrsrcfiles"
-(cd $srctree; find security/*/include -type f) >> "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/$SRCARCH -name module.lds -o -name Kbuild.platforms -o -name Platform) >> "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find $(find arch/$SRCARCH -name include -o -name scripts -type d) -type f) >> "$objtree/debian/hdrsrcfiles"
 if is_enabled CONFIG_STACK_VALIDATION; then
@@ -266,7 +178,6 @@ if is_enabled CONFIG_GCC_PLUGINS; then
 fi
 destdir=$kernel_headers_dir/usr/src/linux-headers-$version
 mkdir -p "$destdir"
-(cd $destdir; patch -p1 < /tmp/headers-debian-byteshift.patch)
 (cd $srctree; tar -c -f - -T -) < "$objtree/debian/hdrsrcfiles" | (cd $destdir; tar -xf -)
 (cd $objtree; tar -c -f - -T -) < "$objtree/debian/hdrobjfiles" | (cd $destdir; tar -xf -)
 (cd $objtree; cp $KCONFIG_CONFIG $destdir/.config) # copy .config manually to be where it's expected to be
@@ -276,8 +187,8 @@ rm -f "$objtree/debian/hdrsrcfiles" "$objtree/debian/hdrobjfiles"
 (cd $destdir; make M=scripts clean)
 
 if [ "$ARCH" != "um" ]; then
-	create_package "$kernel_headers_packagename" "$kernel_headers_dir" "headers"
-	create_package "$dtb_packagename" "$dtb_dir" "dtb"
+	create_package "$kernel_headers_packagename" "$kernel_headers_dir"
+	create_package "$libc_headers_packagename" "$libc_headers_dir"
 fi
 
 create_package "$packagename" "$tmpdir"
diff --git a/scripts/package/mkdebian b/scripts/package/mkdebian
index 0c56afcd1215..cc918291f23c 100755
--- a/scripts/package/mkdebian
+++ b/scripts/package/mkdebian
@@ -94,12 +94,10 @@ else
 	packageversion=$version-$revision
 fi
 sourcename=$KDEB_SOURCENAME
-packagename=linux-image-$BRANCH$LOCALVERSION
-kernel_headers_packagename=linux-headers-$BRANCH$LOCALVERSION
-dtb_packagename=linux-dtb-$BRANCH$LOCALVERSION
+packagename=linux-image"$LOCALVERSION"
+kernel_headers_packagename=linux-headers"$LOCALVERSION"
 dbg_packagename=$packagename-dbg
 debarch=
-image_name=
 set_debarch
 
 if [ "$ARCH" = "um" ] ; then
@@ -187,7 +185,6 @@ Description: Linux kernel, version $version
 
 Package: $kernel_headers_packagename
 Architecture: $debarch
-Depends: make, gcc, libc6-dev, bison, flex, libssl-dev
 Description: Linux kernel headers for $version on $debarch
  This package provides kernel header files for $version on $debarch
  .
@@ -208,11 +205,6 @@ Architecture: $debarch
 Description: Linux kernel debugging symbols for $version
  This package will come in handy if you need to debug the kernel. It provides
  all the necessary debug symbols for the kernel and its modules.
-
-Package: $dtb_packagename
-Architecture: $debarch
-Description: Linux DTB, version $version
- This package contains device blobs from the Linux kernel, version $version
 EOF
 
 cat <<EOF > debian/rules
-- 
2.25.0

